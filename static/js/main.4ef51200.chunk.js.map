{"version":3,"sources":["commands.js","components/Commands/Commands.js","components/Links/Links.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","name","desc","Commands","state","commands","require","this","setState","cmds","map","cmd","className","React","Component","Links","href","target","height","src","alt","App","rel","allowtransparency","frameBorder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,CACb,CACIC,KAAM,OACNC,KAAM,8BAEV,CACID,KAAM,QACNC,KAAM,uBAEV,CACID,KAAM,OACNC,KAAM,qBAEV,CACID,KAAM,QACNC,KAAM,uBAEV,CACID,KAAM,OACNC,KAAM,8BAEV,CACID,KAAM,WACNC,KAAM,sDAEV,CACID,KAAM,cACNC,KAAM,+CAEV,CACID,KAAM,QACNC,KAAM,wDAEV,CACID,KAAM,UACNC,KAAM,yCAEV,CACID,KAAM,MACNC,KAAM,yCAEV,CACID,KAAM,MACNC,KAAM,+BAEV,CACID,KAAM,WACNC,KAAM,8DAEV,CACID,KAAM,SACNC,KAAM,kCAEV,CACID,KAAM,SACNC,KAAM,4BAEV,CACID,KAAM,UACNC,KAAM,oC,8HChCCC,G,wDAvBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,CAAC,CACPJ,KAAM,QACNC,KAAM,+BALJ,E,gEAUV,IAAMG,EAAWC,EAAQ,IACzBC,KAAKC,SAAS,CAAEH,SAAUA,M,+BAG1B,IAAII,EAAOF,KAAKH,MAAMC,SAASK,KAAI,SAAAC,GAAG,OAAI,4BAAI,kCAAQA,EAAIV,MAAhB,MAAgCU,EAAIT,SAE9E,OAAO,yBAAKU,UAAU,YAClB,wCACA,yBAAKA,UAAU,iBAAiBH,Q,GAnBrBI,IAAMC,Y,MCmBdC,MAnBf,WACE,OACE,yBAAKH,UAAU,SACX,uBACIA,UAAU,oBACVI,KAAK,gDACLC,OAAO,UAEP,yBACIL,UAAU,kBACVM,OAAO,KACPC,IAAI,kCACJC,IAAI,iBCmCLC,MA7Cf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,SACZ,yBAAKQ,IAAI,GAAGR,UAAU,OAAOO,IAAI,yBACjC,6BAFF,aAKA,6BACA,yBAAKP,UAAU,aACb,yBAAKA,UAAU,cAAf,kEAGA,yBAAKA,UAAU,eACb,wBAAIA,UAAU,UACZ,uBACEK,OAAO,SACPK,IAAI,sBACJN,KAAK,4GAHP,WAMF,wBAAIJ,UAAU,WACZ,uBACEK,OAAO,SACPK,IAAI,sBACJN,KAAK,kCAHP,aAOJ,kBAAC,EAAD,MACA,uCACA,yBAAKJ,UAAU,gBACb,4BACEO,IAAI,iEACJD,OAAO,MACPK,kBAAkB,OAClBC,YAAY,UC9BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ef51200.chunk.js","sourcesContent":["module.exports = [\r\n    {\r\n        name: 'info', \r\n        desc: 'Important bot information.'\r\n    }, \r\n    {\r\n        name: 'stats',\r\n        desc: 'Show the bot stats.'\r\n    },\r\n    {\r\n        name: 'ping', \r\n        desc: 'Show bot latency.'\r\n    },\r\n    {\r\n        name: 'daily', \r\n        desc: 'Collect daily cash.'\r\n    }, \r\n    {\r\n        name: 'give', \r\n        desc: 'Gift someone your balance.'\r\n    }, \r\n    {\r\n        name: 'withdraw', \r\n        desc: 'Withdraw at least $100K to your NitroType account.'\r\n    }, \r\n    {\r\n        name: 'leaderboard', \r\n        desc: 'View the wealthiest of all LeCashBot users.'\r\n    }, \r\n    {\r\n        name: 'total', \r\n        desc: 'View the amount of cash there exists in the economy.'\r\n    }, \r\n    {\r\n        name: 'profile', \r\n        desc: 'View yours or another user\\'s profile.'\r\n    }, \r\n    {\r\n        name: 'bal', \r\n        desc: 'View yours or another user\\'s balance.'\r\n    }, \r\n    {\r\n        name: 'bet', \r\n        desc: ' Play roulette to win cash.'\r\n    }, \r\n    {\r\n        name: 'register', \r\n        desc: 'Make an account on LeCashBot using your NitroType account.'\r\n    }, \r\n    {\r\n        name: 'delete',\r\n        desc: 'Delete your LeCashBot account.'\r\n    },\r\n    {\r\n        name: 'report', \r\n        desc: 'Report a bug in the bot.'\r\n    }, \r\n    {\r\n        name: 'suggest', \r\n        desc: 'Suggest an idea for LeCashBot.'\r\n    },\r\n]\r\n","import React from 'react';\r\nimport './Commands.scss';\r\n\r\nclass Commands extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            commands: [{\r\n                name: 'ERROR', \r\n                desc: 'Unable to fetch commands.'\r\n            }]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const commands = require('../../commands')\r\n        this.setState({ commands: commands })\r\n    }\r\n    render() {\r\n        let cmds = this.state.commands.map(cmd => <li><code>${cmd.name}</code> - {cmd.desc}</li>);\r\n        \r\n        return <div className=\"Commands\">\r\n            <h1>Commands</h1>\r\n            <div className=\"commands-wrap\">{cmds}</div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Commands;\r\n","import React from 'react';\r\nimport './Links.scss';\r\n\r\nfunction Links() {\r\n  return (\r\n    <div className=\"Links\">\r\n        <a \r\n            className=\"link link__github\"\r\n            href=\"https://github.com/TheTypingMatch/le-cash-bot\"\r\n            target=\"_blank\"\r\n        >\r\n            <img \r\n                className=\"img img__github\"\r\n                height=\"75\"\r\n                src=\"https://i.imgur.com/YoTSl7y.png\"\r\n                alt=\"LeCashBot\"\r\n            />\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Links;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Commands from '../Commands/Commands';\r\nimport Links from '../Links/Links';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Links />\r\n      <h1 className=\"title\">\r\n        <img alt=\"\" className=\"logo\" src=\"assets/lecashbot.png\" />\r\n        <br />\r\n        LeCashBot\r\n      </h1>\r\n      <br />\r\n      <div className=\"info-wrap\">\r\n        <div className=\"about-wrap\">\r\n          LeCashBot is a Discord.js bot based on the NitroType currency.\r\n        </div>\r\n        <div className=\"button-wrap\">\r\n          <h1 className=\"invite\">\r\n            <a \r\n              target=\"_blank\" \r\n              rel=\"noopener noreferrer\" \r\n              href=\"https://discordapp.com/api/oauth2/authorize?client_id=586645522614583306&permissions=134073664&scope=bot\"\r\n            >Invite</a>\r\n          </h1>\r\n          <h1 className=\"sponsor\">\r\n            <a \r\n              target=\"_blank\" \r\n              rel=\"noopener noreferrer\" \r\n              href=\"https://www.patreon.com/LeSirH\"\r\n              >Sponsor</a>\r\n          </h1>\r\n        </div>\r\n        <Commands />\r\n        <h1>Discord</h1>\r\n        <div className=\"discord-wrap\">\r\n          <iframe \r\n            src=\"https://discordapp.com/widget?id=689241652916912138&theme=dark\" \r\n            height=\"500\" \r\n            allowtransparency=\"true\" \r\n            frameBorder=\"0\">\r\n          </iframe>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}